{
  "name": "http-proxy-rules",
  "version": "1.0.1",
  "description": "A proxy rules add-on to the node-http-proxy module.",
  "main": "index.js",
  "scripts": {
    "test": "mocha"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/donasaur/http-proxy-rules.git"
  },
  "author": {
    "name": "Don Mai",
    "email": "donhmai@gmail.com"
  },
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/donasaur/http-proxy-rules/issues"
  },
  "homepage": "https://github.com/donasaur/http-proxy-rules#readme",
  "devDependencies": {
    "async": "^1.5.0",
    "chai": "^3.4.1",
    "http-proxy": "^1.12.0",
    "mocha": "^2.3.4",
    "request": "^2.67.0"
  },
  "keywords": [
    "node-http-proxy",
    "http-proxy",
    "http-proxy-table",
    "proxy-table",
    "proxy-rules",
    "proxy"
  ],
  "readme": "\nhttp-proxy-rules\n======\n\n[![Build Status](https://travis-ci.org/donasaur/http-proxy-rules.svg?branch=master)](https://travis-ci.org/donasaur/http-proxy-rules)\n\n`http-proxy-rules` is an add-on module to the [node-http-proxy](https://github.com/nodejitsu/node-http-proxy) library. It lets you define a set of rules to translate matching routes to target routes that the reverse proxy service will talk to on the client's behalf.\n\n## Installation\n```sh\nnpm install http-proxy-rules --save\n```\n\n## Example Use Case\n```js\n  var http = require('http'),\n      httpProxy = require('http-proxy'),\n      HttpProxyRules = require('http-proxy-rules');\n\n  // Set up proxy rules instance\n  var proxyRules = new HttpProxyRules({\n    rules: {\n      '.*/test': 'http://localhost:8080/cool', // Rule (1)\n      '.*/test2/': 'http://localhost:8080/cool2/' // Rule (2)\n    },\n    default: 'http://localhost:8080' // default target\n  });\n\n  // Create reverse proxy instance\n  var proxy = httpProxy.createProxy();\n\n  // Create http server that leverages reverse proxy instance\n  // and proxy rules to proxy requests to different targets\n  http.createServer(function(req, res) {\n\n    // a match method is exposed on the proxy rules instance\n    // to test a request to see if it matches against one of the specified rules\n    var target = proxyRules.match(req);\n    if (target) {\n      return proxy.web(req, res, {\n        target: target\n      });\n    }\n\n    res.writeHead(500, { 'Content-Type': 'text/plain' });\n    res.end('The request url and path did not match any of the listed rules!');\n  }).listen(6010, cb);\n```\n\nGiven the object we used to initialize the `HttpProxyRules` instance above, here are some [**examples**](test/index.tests.js#L38) of how sample url paths would be translated.\n\n## Options\n\nYou can initialize a new `http-proxy-rules` instance with the following options:\n\n```js\n{\n  rules: {}, // See notes below\n  default: '' // (optional) if no rules matched, translate url path to specified default\n}\n```\nThe rules object contains a set of key-value pairs mapping a regex-supported url path to a target route. The module only tries to match the visited url path, and not the entire url, with a specified rule. The target route must include the protocol (e.g., http) and the FQDN. See the [tests](test/index.tests.js) for examples of how incoming route url paths may be translated with the use of this module.\n\n## Other Notes\n* `(?:\\\\W|$)` is appended to the end of the regex-supported url path, so that if there is a key like  `.*/test` in the rules, the module matches paths `/test`, `/test/`, `/test?` but not `/testing`.\n* As long as object keys continued to be ordered in V8, if there are multiple rules that match against a given url path, the module will pick the matching rule listed first for the translation.\n",
  "readmeFilename": "README.md",
  "_id": "http-proxy-rules@1.0.1",
  "dist": {
    "shasum": "27088d56953865ffc2b17082cc374e606a0f8e25"
  },
  "_from": "http-proxy-rules@",
  "_resolved": "https://registry.npmjs.org/http-proxy-rules/-/http-proxy-rules-1.0.1.tgz"
}
